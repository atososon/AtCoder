#!/usr/bin/env python3
from audioop import reverse
import sys


def solve(N: int, K: int, X: int, A: "List[int]"):
    for i in range(N):
        s = A[i] // X
        if s > K:
            A[i] -= K*X
            K = 0
            break
        else:
            A[i] %= X
            K -= s
    A.sort(reverse=True)
    if K > 0:
        for i in range(min(K, len(A))):
            A[i] = 0
    print(sum(A))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, X, A)


if __name__ == '__main__':
    main()

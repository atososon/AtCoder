#!/usr/bin/env python3
def BFS(q1, q2, edges,N):
    roots=[ [] for _ in range(N)]
    for a,b in edges:
        roots[a-1]+=[(b-1,1)]
        roots[b-1]+=[(a-1,1)]
    dist=[-1]*N
    stack=[]
    stack.append(q1)
    dist[q1]=0
    while stack:
        label=stack.pop(-1)
        for i,c in roots[label]:
            if dist[i]==-1:
                dist[i]=dist[label]+c
                stack+=[i]
                if i == q2:
                    return dist[q2]

# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    n, Q = map(int, input().split())
    edges = [[] for _ in range(n)]
    for i in range(n-1):
        x, y = map(int, input().split())
        edges[x-1].append(y-1)
        edges[y-1].append(x-1)
    D = [-1] * n
    q = [0]
    D[0] = 0
    while q:
        u = q.pop()
        for v in edges[u]:
            if D[v] >= 0: continue
            D[v] = D[u] + 1
            q.append(v)

    for i in range(Q):
        q1, q2 = map(int, input().split())
        ans = D[q1-1] + D[q2-1]
        if ans%2 == 0:
            print("Town")
        else:
            print("Road")
    return

if __name__ == '__main__':
    main()

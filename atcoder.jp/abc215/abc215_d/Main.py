#!/usr/bin/env python3
import sys

def factorization(n):
    arr = []
    temp = n
    for i in range(2, int(-(-n**0.5//1))+1):
        if temp%i==0:
            cnt=0
            while temp%i==0:
                cnt+=1
                temp //= i
            arr.append(i)

    if temp!=1:
        arr.append(temp)

    if arr==[]:
        arr.append(n)

    return arr

def solve(N: int, M: int, A: "List[int]"):
    ans = [True for _ in range(M)]
    temp = list()
    for i in range(N):
        if A[i] != 1:
            for j in factorization(A[i]):
                temp.append(j)
    temp = set(temp)
    for i in temp:
        s = i
        s1 = s
        while s <= M:
            ans[s-1] = False
            s += s1
    print(ans.count(True))
    for i in range(M):
        if ans[i]:
            print(i+1)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()

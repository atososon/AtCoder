#!/usr/bin/env python3
import sys


def solve(N: int, T: "List[int]"):
    s = sum(T)
    dp = [[0] * (s//2+1) for _ in range(N+1)]
    for i in range(N):
        for j in range(s//2+1):
            if T[i] <= j:
                dp[i+1][j] = max(dp[i][j - T[i]] + T[i], dp[i][j])
            else:
                dp[i+1][j] = dp[i][j]
    print(s-dp[-1][-1])
            
    return


# Generated by 2.4.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T)

if __name__ == '__main__':
    main()

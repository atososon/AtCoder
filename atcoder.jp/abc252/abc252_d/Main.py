#!/usr/bin/env python3
import sys
from collections import Counter


def solve(N: int, A: "List[int]"):

    ans = N * (N-1) * (N-2) // 6
    counter = Counter(A)
    for a in counter.keys():
        if counter[a] == 2:
            ans -= (N-2)
        elif counter[a] >= 3:
            ans -= (counter[a] * (counter[a]-1))//2 * (N - counter[a])
            ans -= (counter[a] * (counter[a]-1) * (counter[a]-2))//6
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import sys
from collections import deque
MOD = 1000000007  # type: int


def bfs(u, n, g):
    queue = deque([u])
    d = [None] * n
    d[u] = [0, 1]
    while queue:
        v = queue.popleft()
        for i in g[v]:
            if d[i] is None:
                d[i] = [d[v][0] + 1, d[v][1]]
                queue.append(i)
            elif d[i][0]-1 == d[v][0]:
                d[i][1] += d[v][1]
                d[i][1] %= MOD
            elif d[i][0]-1 > d[v][0]:
                d[i] = [d[v][0] + 1, d[v][1]]
        
    if d[-1]:
        return d[-1][1] % MOD
    return 0

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    g = [list() for _ in range(N)]
    for i in range(M):
        g[A[i]-1].append(B[i]-1)
        g[B[i]-1].append(A[i]-1)
    ans = bfs(0, N, g)

    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()

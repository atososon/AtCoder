#!/usr/bin/env python3
import sys
import collections

def solve(N: int, K: int, c: "List[int]"):
    li = c[:K]
    s = collections.Counter(li)
    temp = len(set(li))
    ans = len(set(li))
    for i in range(K,N):
        s[c[i-K]] -= 1
        if s[c[i-K]] <= 0:
            temp -= 1
        s[c[i]] += 1
        if s[c[i]] == 1:
            temp += 1
        ans = max(ans, temp)
    print(ans)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, c)

if __name__ == '__main__':
    main()

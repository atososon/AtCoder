#!/usr/bin/env python3
import sys
import bisect


def solve(N: int, Q: int, A: "List[int]", X: "List[int]"):
    A.sort()
    cumulative_sum = [0] * (N + 1)
    for i in range(N):
        cumulative_sum[i+1] += cumulative_sum[i] + A[i]
    for x in X:
        q = bisect.bisect_left(A, x)
        ans = 2*x*q + cumulative_sum[-1] - N*x - 2*cumulative_sum[q]
        print(ans)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    X = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, A, X)


if __name__ == '__main__':
    main()

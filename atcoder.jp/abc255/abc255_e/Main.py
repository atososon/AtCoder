#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, M: int, S: "List[int]", X: "List[int]"):
    A = [0]
    for s in S:
        A.append(s - A[-1])

    res = defaultdict(int)

    for i, a in enumerate(A):
        for x in X:
            if i % 2:
                res[x-a] += 1
            else:
                res[a-x] += 1
    print(max(res.values()))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [int(next(tokens)) for _ in range(N - 1)]  # type: "List[int]"
    X = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, S, X)


if __name__ == '__main__':
    main()

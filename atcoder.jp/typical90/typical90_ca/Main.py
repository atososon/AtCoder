#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(H: int, W: int, A: "List[List[int]]", B: "List[List[int]]"):
    judge = list()
    for i in range(H):
        li = list()
        for j in range(W):
            li.append(A[i][j]-B[i][j])
        judge.append(li)
    ans = 0
    for i in range(H-1):
        for j in range(W-1):
            tmp = -judge[i][j]
            judge[i][j] += tmp
            judge[i+1][j] += tmp
            judge[i][j+1] += tmp
            judge[i+1][j+1] += tmp
            ans += abs(tmp)
    flag = True
    for i in range(H):
        for j in range(W):
            if judge[i][j] != 0:
                flag = False
    if flag:
        print(YES)
        print(ans)
    else:
        print(NO)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)]
         for _ in range(H)]  # type: "List[List[int]]"
    B = [[int(next(tokens)) for _ in range(W)]
         for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, A, B)


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import sys

H_W_LEN = 10**3 + 1


def solve(N: int, lx: "List[int]", ly: "List[int]", rx: "List[int]", ry: "List[int]"):
    f = [[0 for _ in range(H_W_LEN)] for _ in range(H_W_LEN)]
    for i in range(N):
        f[lx[i]][ly[i]] += 1
        f[rx[i]][ry[i]] += 1
        f[lx[i]][ry[i]] -= 1
        f[rx[i]][ly[i]] -= 1
    w_sum = [0 for _ in range(H_W_LEN)]
    h_sum = [0 for _ in range(H_W_LEN)]
    for i in range(H_W_LEN):
        for j in range(H_W_LEN):
            w_sum[j] += f[i][j]
            f[i][j] = w_sum[j]
    for i in range(H_W_LEN):
        for j in range(H_W_LEN):
            h_sum[j] += f[j][i]
            f[j][i] = h_sum[j]
    ans = [0 for _ in range(N)]
    for i in range(H_W_LEN):
        for j in range(H_W_LEN):
            if f[i][j] > 0:
                ans[f[i][j] - 1] += 1
    for i in ans:
        print(i)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    lx = [int()] * (N)  # type: "List[int]"
    ly = [int()] * (N)  # type: "List[int]"
    rx = [int()] * (N)  # type: "List[int]"
    ry = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        lx[i] = int(next(tokens))
        ly[i] = int(next(tokens))
        rx[i] = int(next(tokens))
        ry[i] = int(next(tokens))
    solve(N, lx, ly, rx, ry)


if __name__ == '__main__':
    main()

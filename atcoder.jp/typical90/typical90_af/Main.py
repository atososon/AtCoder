#!/usr/bin/env python3
import sys
import itertools

def solve(N: int, A: "List[List[int]]", M: int, X: "List[int]", Y: "List[int]"):
    l = [i for i in range(N)]
    p = itertools.permutations(l, N)
    ans = 10**9
    h = [[False] * N for _ in range(N)]
    for i in range(M):
        h[X[i]-1][Y[i]-1] = True
        h[Y[i]-1][X[i]-1] = True
        
    for pe in p:
        f = 0
        for i in range(N-1):
            if h[pe[i]][pe[i+1]]:
                f = 1
        if f == 1:
            continue
        else:
            temp = 0
            for j in range(N):
                temp += A[pe[j]][j]
            ans = min(ans, temp)
            
    if ans == 10**9:
        print(-1)
    else:
        print(ans)
            
                
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    M = int(next(tokens))  # type: int
    X = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, A, M, X, Y)

if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import sys
import collections

def solve(N: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    for i in range(N):
        A[i] %= 46
        B[i] %= 46
        C[i] %= 46
    a = collections.Counter(A)
    b = collections.Counter(B)
    c = collections.Counter(C)
    ans = 0
    for i in range(len(a)):
        for j in range(len(b)):
            for k in range(len(c)):
               if (list(a.keys())[i] + list(b.keys())[j] + list(c.keys())[k]) % 46 == 0:
                   ans += a[list(a.keys())[i]] * b[list(b.keys())[j]] * c[list(c.keys())[k]]
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B, C)

if __name__ == '__main__':
    main()

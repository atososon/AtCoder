#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, A: "List[int]", T: "List[int]", x: "List[int]", y: "List[int]"):
    shift = 0
    for i in range(Q):
        if T[i] == 1:
            temp = A[(x[i]-1 - shift)%N]
            A[(x[i]-1 - shift)%N] = A[(y[i]-1 - shift)%N]
            A[(y[i]-1 - shift)%N] = temp
        elif T[i] == 2:
            shift += 1
        else:
            print(A[(x[i]-1 - shift)%N])
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    y = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        T[i] = int(next(tokens))
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, Q, A, T, x, y)

if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import sys

def dfs(g, start, N):
    d = [-1] * N
    d[start] = 0
    stack = [start]
    push = stack.append
    pop = stack.pop
    while stack:
        v = pop()
        node = d[v] + 1
        for nv in g[v]:
            if d[nv] >= 0:
                continue
            else:
                d[nv] = node
                push(nv)
    
    return d 

def solve(N: int, A: "List[int]", B: "List[int]"):
    g = [[] for _ in range(N)]
    for i in range(N-1):
        g[A[i]-1].append(B[i]-1)
        g[B[i]-1].append(A[i]-1)
    d = dfs(g, 0, N)
    mxi = max(enumerate(d), key=lambda x: x[1])[0]
    dmx = dfs(g, mxi, N)
    print(max(dmx)+1)
    return


# Generated by 2.4.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()

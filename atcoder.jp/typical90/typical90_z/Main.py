#!/usr/bin/env python3
import sys
import math

sys.setrecursionlimit(1000000)


def solve(N: int, A: "List[int]", B: "List[int]"):
    g = [list() for _ in range(N)]
    visited = [False for _ in range(N)]
    ans = [False for _ in range(N)]
    for i in range(N-1):
        g[A[i]-1].append(B[i]-1)
        g[B[i]-1].append(A[i]-1)

    def dfs(bool, n):
        visited[n] = True
        if bool:
            ans[n] = bool
        bool = not bool
        for i in g[n]:
            if visited[i]:
                continue
            dfs(bool, i)
    dfs(False, 0)
    x = [i+1 for i, b in enumerate(ans) if b]
    y = [i+1 for i, b in enumerate(ans) if not b]
    if len(x) >= math.ceil(N/2):
        print(*x[:math.ceil(N/2)])
    else:
        print(*y[:math.ceil(N/2)])
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == '__main__':
    main()

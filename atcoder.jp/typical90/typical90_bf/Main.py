#!/usr/bin/env python3
import sys

MOD = 10**5  # type: int


def calculate_each_digits_sum(N):
    ans = 0
    for s in str(N):
        ans += int(s)
    return ans


def solve(N: int, K: int):
    visitted = [False for _ in range(MOD)]
    x = N
    count = 0
    transition = list()
    while True:
        transition.append(x)
        count += 1
        x = x + calculate_each_digits_sum(x)
        x %= MOD
        if visitted[x]:
            transition.append(x)
            break
        visitted[x] = True
    if len(transition) > K:
        print(transition[K])
        return
    common = transition[:transition.index(transition[-1])]
    roop = transition[transition.index(transition[-1]):-1]
    ans = roop[(K-len(common)) % len(roop)]
    print(ans)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, K)


if __name__ == '__main__':
    main()

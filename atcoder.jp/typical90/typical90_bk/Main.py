#!/usr/bin/env python3
import sys
from collections import Counter


def solve(H: int, W: int, P: "List[List[int]]"):
    ans = 0
    for i in range(2**H):
        select_h = list()
        for j in range(H):
            if (i >> j) & 1:
                select_h.append(j)
        l = list()
        for j in select_h:
            l.append(P[j])
        lt = [list(x) for x in zip(*l)]
        li = list()
        for j in lt:
            if len(set(j)) == 1:
                li.append(j[0])
        if li:
            c = Counter(li)
            v = max(list(c.values()))
            ans = max(ans, v * len(select_h))
    print(ans)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    P = [[int(next(tokens)) for _ in range(W)]
         for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, P)


if __name__ == '__main__':
    main()

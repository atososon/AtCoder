#!/usr/bin/env python3
import sys

sys.setrecursionlimit(1000000)


YES = "Yes"  # type: str
NO = "No"  # type: str


class UnionFind():

    def __init__(self, n):
        self.root = [-1]*(n+1)
        self.rank = [0]*(n+1)

    def find(self, x):
        if self.root[x] < 0:
            return x
        else:
            self.root[x] = self.find(self.root[x])
            return self.root[x]

    def is_same(self, x, y):
        return self.find(x) == self.find(y)

    def get_root(self, x):
        return self.root[x]

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if(x == y):
            return
        elif(self.rank[x] > self.rank[y]):
            self.root[x] += self.root[y]
            self.root[y] = x
        else:
            self.root[y] += self.root[x]
            self.root[x] = y
            if(self.rank[x] == self.rank[y]):
                self.rank[y] += 1

    # Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    h, w = map(int, input().split())
    uf = UnionFind(h*w)
    f = [[False for _ in range(w+2)] for _ in range(h+2)]
    q = int(input())
    for _ in range(q):
        query = list(map(int, input().split()))
        if query[0] == 1:
            f[query[1]][query[2]] = True
            hw = (query[1]-1)*w + query[2] - 1
            if f[query[1]-1][query[2]]:
                uf.unite(hw, hw-w)
            if f[query[1]+1][query[2]]:
                uf.unite(hw, hw+w)
            if f[query[1]][query[2]-1]:
                uf.unite(hw, hw-1)
            if f[query[1]][query[2]+1]:
                uf.unite(hw, hw+1)
        else:
            hw1 = (query[1]-1)*w + query[2] - 1
            hw2 = (query[3]-1)*w + query[4] - 1
            if f[query[1]][query[2]] and f[query[3]][query[4]] and uf.is_same(hw1, hw2):
                print(YES)
            else:
                print(NO)


if __name__ == '__main__':
    main()
